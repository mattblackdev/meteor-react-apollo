type Query {
  users: [User]
  currentUser: User
  businesses(_id: ID): [Business!]!
  businessBySlug(slug: String!): Business
}

type User @mongo(name: "users") {
  _id: ID!
  username: String
  profile: UserProfile!
  emails: [Email!]!
  businesses: [Business] @link(to: "users")
}

type Business @mongo(name: "businesses") {
  _id: ID!
  name: String!
  address: Address!
  users: [User] @link(field: "userLinks", metadata: true)
  slug: String!
  googlePlaceId: String!
  googleReviewShortLink: ShortLink!
  reviewDetails: ReviewDetails!
  customers: [Customer] @link(to: "business")
  smsTemplates: [SmsTemplate!]!
  smsMessages: [SmsMessage] @link(to: "business")
  currentUserRole: Role
}

type Customer @mongo(name: "customers") {
  _id: ID!
  name: String!
  phone: String!
  email: String!
  business: Business @link(field: "businessId")
}

type SmsMessage @mongo(name: "smsMessages") {
  _id: ID!
  customer: Customer @link(field: "customerId")
  business: Business @link(field: "businessId")
  templateId: ID!
  customized: Boolean!
  message: String!
  link: ShortLink!
  sendDate: Date!
  clickedDate: Date
}

enum Role {
  OWNER
  ADMIN
  PARTNER
}

type UserProfile {
  name: String!
  phoneNumber: String!
}

type Email {
  address: String!
  verified: Boolean!
}

type ShortLink {
  url: String!
  hash: String!
  long_url: String!
}

type Address {
  address1: String!
  address2: String
  city: String!
  state: String!
  zip: String!
}

type ReviewDetails {
  googleRating: Int
  googleReviews: [Review]
}

type Review {
  author_name: String
  author_url: String
  language: String
  profile_photo_url: String
  rating: Int!
  relative_time_description: String
  text: String
  time: Int!
}

type SmsTemplate {
  _id: ID!
  name: String!
  template: String!
  default: Boolean!
}

enum When {
  NOW
  ONE_HOUR
  TWO_HOURS
  TONIGHT
  TOMORROW
}

type Mutation {
  sendText(input: SendTextInput!): Business!
  sendGoogleReviewSMS(input: CustomerCheckInInput!): Boolean
  signUpBusiness(input: SignUpBusinessInput!): Business!
  createSmsTemplate(input: CreateSmsTemplateInput!): Business!
  updateSmsTemplate(input: UpdateSmsTemplateInput!): Business!
  setDefaultSmsTemplate(input: SetDefaultSmsTemplateInput!): Business!
  deleteSmsTemplate(input: DeleteSmsTemplateInput!): Business!
}

input SendTextInput {
  businessId: ID!
  templateId: ID!
  name: String!
  phone: String
  email: String
  message: String!
  when: When!
}

input CreateSmsTemplateInput {
  businessId: ID!
  name: String!
  template: String!
}

input DeleteSmsTemplateInput {
  _id: ID!
  businessId: ID!
}

input UpdateSmsTemplateInput {
  _id: ID!
  businessId: ID!
  template: String
  name: String
}

input SetDefaultSmsTemplateInput {
  _id: ID!
  businessId: ID!
}

input CustomerCheckInInput {
  name: String!
  phone: String!
  email: String!
}

input SignUpBusinessInput {
  name: String!
  address: AddressInput!
  # If no owner, use currently logged in user
  owner: OwnerInput
}

input AddressInput {
  address1: String!
  address2: String
  city: String!
  zip: String!
  state: String!
}

input OwnerInput {
  name: String!
  phone: String!
  email: String!
  # TODO: If no password, send email
  password: String
}
